周4知识点


为什么要使用框架？
框架提供了很多功能，比如数据库（DB）、缓存（Cache）、会话（Session）、文件上传等。
不但为前期开发提供了方便，更为后期项目性能的优化（缓存技术由文件缓存成Redis），平台的改变（数据库由Oracle换成Mysql）提供了技术保障。

选择流行框架的优点：
1.	文档齐全【高质量】
2.	社区活跃
3.	后期支持好
4.	语法富有表现力
5.	丰富的扩展包（功能包）

Laravel简介：
1.Laravel是一套简洁、优雅的PHP web开发框架
2.具有富于表达性且简洁的语法
3.Laravel是易于理解且强大的，它提供了强大的工具用以开发大型、健壮的应用
4.具有验证、路由、session、缓存、数据库迁移工具、单元测试等常用的工具和功能



MVC简介：
MVC全名是Model View Controller，是模型（Model）-视图（View）-控制器（Controller）的缩写。
作用：
Model是应用程序中用于处理应用程序数据逻辑的部分
通常模型负责在数据中存取数据
View是应用程序中处理数据显示的部分
Controller是应用程序中处理用户交互的部分



什么是路由：
将用户的请求按照事先规划的方案提交给指定的控制器或者功能函数来进行处理.
在ThinkPHP框架中，当我们在URL地址中，传递m、c、a三个参数时，系统会自动跳转到指定模型中指定控制器的指定方法
，这些处理过程都是由框架自动完成的。但是，在Laravel框架中，其并没有指定固定参数，其路由必须要手工进行配置。
把用户需要访问的全部路由都事先设置好，用户只能访问声明的一些路由，即没有声明的路由是不能被访问的，
进而可以对网站的安全有一定的保护作用。


如果要定义重定向到另一个 URI 的路由，可以使用 Route::redirect方法。这个方法可以快速的实现重定向，而不再需要去定义完整的路由或者控制器:



控制器：

控制器名称(首字母大写)+Controller.php,
比如如下：
UserController.php


如何定义控制器？
注意：使用大驼峰命名，同时注意命名空间和基类控制器的引入


1.	怎样新建视图
Info.php    info.blade.php
2.	怎样输出视图
Return View(‘info’);
Return View(‘member/info’);
Return View(‘member/info’,[‘name’=>’haoyun’]);


视图目录：Resources目录
后缀：以PHP为主


视图文件的命名
（1）文件名习惯小写（建议小写）
（2）文件名的后缀是 .blade.php
因为laravel里面有一套模板引擎就是使用blade，可以直接使用标签语法{{ $title }},也可以使用原生的php语法显示数据。


模板中输出变量
（1）{{变量}}
{{$name}}等价于<?php echo $name?>
{{$name  or  'default'}}等价于<?php echo isset( $name)?$name:'default'?>
（2）{!!变量!!}
如果变量信息里边如果有 ”<” ”>” 等html标记信息，那么该变量在输出的时候也会看到该标记，即html标记被转化为符号实体了，而没有被浏览器解析掉，如果希望看到被浏览器解析后的内容，就需要设置两个感叹号。
例如：
$title = "<a href='http://www.baidu.com'>百度</a>";




